<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!--
		자바를 이용한 백엔드 로직을 작성하다 보면,
		결과를 확인하기 위해 System.out.println()을 자주 사용해왔습니다.
		System.out.println()은 단순 출력 이상의 기능을 수행할 수 없기 때문에
		로그에 대한 다양한 기능을 제공하는 log4j 라이브러리를 사용합니다.
	 -->

	<!-- Appenders -->
	<!-- appender: 로그의 출력 위치(파일, 콘솔, DB 등)를 결정합니다.

		   ConsoleAppender: 콘솔에 로그 메세지를 출력
	 -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>

	<!-- 날짜별 로그 파일 생성 -->
	<!-- 설정한 기간 단위로 새 파일을 만들어서 로그 메세지를 기록합니다.

		   DailyRollingFileAppender: 설정한 기간 단위로 새 파일을 만들어서 로그 메세지를 기록합니다.
	-->
	<appender name="rollingFile" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="File" value="C:/LOG/all.log" />
		<param name="Append" value="true" /> <!-- 기존 파일에 붙여넣을지, 새로 생성할지 정하는 태그 -->
		<!-- <param name="MaxFileSize" value="10MB" /> --> <!-- 파일의 최대 크기 -->
		<param name="DatePattern" value="'.'yyyy-MM-dd" />

		<!-- 로그 출력 시 형식 지정 -->
		<!--
			%p -> 로그 레벨 출력 (info, error, warn...)
			%m -> 메세지
			%c -> 전체 패키지명 또는 파일 이름 (%C -> 클래스 이름)
			%d -> 이벤트 발생 시각 ( yyyy-MM-dd HH:mm:ss )
			%C{숫자} -> 패키지 레벨을 숫자만큼 출력해준 후 클래스명을 출력
			%n -> 줄 개행 기호
			숫자: 공백 생성. 글자가 차지할 공간. 음수로 주면 좌측정렬, 양수 주면 우측 정렬
		 -->
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%d %p [%C{10}] %m%n" />
		</layout>
		<!-- <layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout> -->
	</appender>

	<!-- 날짜별 로그 파일 생성 (에러만) -->
	<appender name="errFile" class="org.apache.log4j.DailyRollingFileAppender">
		<!-- 이 태그를 지정하면 값에 대항하는 레벨의 로그만 출력하고, 없으면 전부 다 출력한다. -->
		<param name="Threshold" value="ERROR" />
		<param name="File" value="C:/LOG/error.log" />
		<param name="Append" value="true" />
		<!-- <param name="MaxFileSize" value="10MB" /> -->
		<param name="DatePattern" value="'.'yyyy-MM-dd" />

		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%d %p [%C{10}] %m%n" />
		</layout>
	</appender>

	<!--
		log4j의 여러가지 로그 레벨
		FATAL (가장 높음) - 가장 심각한 문제가 발생할 때 사용.
		ERROR - 문제가 발생한 상태
		WARN - 오류의 원인이 될 수 있는 메세지.
		INFO - 상태 변경 같은 실제 어플리케이션의 운영과 관련된 로직.
		DEBUG - 디버깅 용도
		TRACE (가장 낮음) - 가장 상세한 로깅 정보를 출력.
	 -->

	<!-- aop 패키지를 로그레벨로 추가 -->
	<!-- <logger name="kr.co.seaduckene.util.aop">
		<level value="info" />
	</logger> -->

	<!-- Application Loggers -->
	<logger name="kr.co.seaduckene">
		<level value="info" />
	</logger>

	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>

	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>

	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<!-- SQL Logger -->

	<!-- DB 연결에 관련된 이벤트를 기록 (Connection pool 등...) -->
	<logger name="jdbc.connection" additivity="false"> <!-- additivity, 중복 출력 허용 여부 -->
		<level value="warn" />
		<appender-ref ref="console" />
	</logger>

	<!-- ResultSet을 제외한 모든 JDBC 호출 내역을 기록. -->
	<logger name="jdbc.audit" additivity="false">
		<level value="warn" />
		<appender-ref ref="console" />
	</logger>

	<!-- ResultSet을 포함한 모든 JDBC 호출 내역을 기록. -->
	<logger name="jdbc.resultset" additivity="false">
		<level value="warn" />
		<appender-ref ref="console" />
	</logger>

	<!-- SQL문만 기록. ( ? 값이 드러납니다.) -->
	<logger name="jdbc.sqlonly" additivity="false">
		<level value="info" />
		<appender-ref ref="console" />
	</logger>

	<!-- table 모양으로 조회된 내용을 기록합니다. -->
	<logger name="jdbc.resultsettable" additivity="false">
		<level value="info" />
		<appender-ref ref="console" />
	</logger>

	<!-- 해당 SQL을 실행시키는 데 소요된 시간 정보 기록(밀리초). -->
	<logger name="jdbc.sqltiming" additivity="false">
		<level value="info" />
		<appender-ref ref="console" />
	</logger>

	<!-- Root Logger -->
	<root>
		<priority value="info" />
		<appender-ref ref="console" />
		<appender-ref ref="rollingFile" />
		<appender-ref ref="errFile" />
	</root>

</log4j:configuration>
